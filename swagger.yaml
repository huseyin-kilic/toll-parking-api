openapi: 3.0.1
info:
  title: Toll Parking API
  description: 'This API allows managing parking spaces and parking information for
    a toll parking area. <br/> A typical parking flow would be like:<ol><li> Get an
    available parking space for a given car type: <code>GET /v1/parkingSpaces?type=GASOLINE</code><li>
    Start parking on this parking space: <code>POST /v1/parkings</code><li> End parking
    using the parking id & receive billing: <code>DELETE /v1/parkings/{parkingId}</code></ol>'
  contact:
    name: Huseyin KILIC
    url: https://www.linkedin.com/in/huseyin-kilic-msc-psm/
    email: hklc86@gmail.com
  version: v1
servers:
- url: http://localhost:8191
  description: Generated server url
tags:
- name: Parking Space Actions
  description: "Exposes the current state of the parking area. Available actions:\
    \ \n 1) Retrieve current state of a parking space by id.\n 2) Retrieve next available\
    \ parking space for a given car type.\n 3) Retrieve list of parking spaces matching\
    \ given search criteria."
- name: Parking Actions
  description: "Exposes operations around actual parking. Available actions: \n 1)\
    \ Start a new parking at a given parking lot.\n 2) Complete an existing parking\
    \ & return billing information.\n 3) Retrieve details about an existing parking."
paths:
  /v1/parkings/{id}:
    get:
      tags:
      - Parking Actions
      summary: Returns parking information by id
      description: Parking information retrieval by id
      operationId: getParkingInformation
      parameters:
      - name: id
        in: path
        description: Id of the parking information to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Malformed parking id
        "404":
          description: No parking information exists with given id
        "500":
          description: Server error
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
    delete:
      tags:
      - Parking Actions
      summary: Ends an existing parking
      description: |-
        Completes the parking with the given parking id & marks the parking space as available.
        End time is set automatically by the system.
        Duration and billing information are calculated by the system.
      operationId: endParking
      parameters:
      - name: id
        in: path
        description: Id of the parking to complete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Trying to end a parking that is already completed
        "404":
          description: No parking information exists with given id
        "500":
          description: Server error
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
  /v1/parkings:
    post:
      tags:
      - Parking Actions
      summary: Starts a new parking at the provided parking space
      description: |-
        Starts a new parking at the given parking space & marks the parking space as occupied.
        Start time is set automatically by the system
      operationId: startParking
      requestBody:
        description: "Start parking at the given parking space. \nOnly the parking\
          \ space id should be provided."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parking'
        required: true
      responses:
        "400":
          description: Bad request (Invalid arguments or Parking space is already
            occupied)
        "404":
          description: No parking space exists with given id
        "500":
          description: Server error
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
  /v1/parking-spaces:
    get:
      tags:
      - Parking Space Actions
      summary: Lists parking spaces matching given criteria
      description: "Can be used in order to: \n 1) Retrieve the next available parking\
        \ space for given car type (if 'type' is the only query parameter provided)\n\
        \ 2) Retrieve the list of parking spaces matching given criteria"
      operationId: searchParkingSpaces
      parameters:
      - name: type
        in: query
        description: Car type
        required: true
        schema:
          type: string
          enum:
          - GASOLINE
          - KW20
          - KW50
      - name: status
        in: query
        description: Current status of the parking space
        required: false
        schema:
          type: string
          default: AVAILABLE
          enum:
          - AVAILABLE
          - OCCUPIED
      - name: count
        in: query
        description: Number of parking spaces to retrieve
        required: false
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "400":
          description: Invalid query arguments
        "404":
          description: "HTTP-404 is never returned for this request. \nIn case no\
            \ parking spaces found, HTTP-204 is returned as shown above."
        "500":
          description: Server error
        "204":
          description: No parking space available with given criteria
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingSpace'
  /v1/parking-spaces/{id}:
    get:
      tags:
      - Parking Space Actions
      summary: Finds parking space by id
      description: Parking space retrieval by id
      operationId: getParkingSpaceById
      parameters:
      - name: id
        in: path
        description: Id of the parking space to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Malformed parking space id
        "404":
          description: No parking space exists with given id
        "500":
          description: Server error
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingSpace'
components:
  schemas:
    Billing:
      required:
      - amount
      - currency
      - id
      type: object
      properties:
        id:
          minimum: 0
          type: integer
          description: Unique identifier
          format: int64
          readOnly: true
          example: 90
        currency:
          type: string
          description: Currency of the price
          readOnly: true
          example: EUR
        amount:
          type: number
          description: Actual price for the parking
          format: double
          readOnly: true
          example: 5.6
      description: Billing information calculated when the parking is completed
      readOnly: true
    Parking:
      required:
      - id
      - parkingSpaceId
      - startDateTime
      type: object
      properties:
        id:
          minimum: 0
          type: integer
          description: Unique identifier
          format: int64
          readOnly: true
          example: 8
        parkingSpaceId:
          minimum: 1
          type: integer
          description: Parking space where the parking takes place
          format: int64
          example: 8
        startDateTime:
          type: string
          description: Start time of the parking
          format: date-time
          readOnly: true
          example: 2020-04-13T07:30:00Z
        endDateTime:
          type: string
          description: End time of the parking
          format: date-time
          readOnly: true
          example: 2020-04-13T08:30:00Z
        durationSeconds:
          type: integer
          description: Duration of the parking in seconds
          format: int64
          readOnly: true
          example: 3600
        billing:
          $ref: '#/components/schemas/Billing'
      description: Details regarding the ongoing parking in this parking space
      readOnly: true
    ParkingSpace:
      required:
      - id
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier
          format: int64
          example: 15
        type:
          type: string
          description: Type of the cars allowed to park in this parking space
          readOnly: true
          enum:
          - GASOLINE
          - KW20
          - KW50
        status:
          type: string
          description: Current availability status
          readOnly: true
          default: AVAILABLE
          enum:
          - AVAILABLE
          - OCCUPIED
        currentParkingInformation:
          $ref: '#/components/schemas/Parking'
